
#include "Mach_Vouch.h"
#include <errno.h>
#include <sched.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <mach/mach.h>
#include <mach-o/loader.h>
#include <dlfcn.h>



static void hexdump(const void* data, size_t size) {
    char ascii[17];
    size_t i, j;
    ascii[16] = '\0';
    for (i = 0; i < size; ++i) {
        printf("%02X ", ((unsigned char*)data)[i]);
        if (((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {
            ascii[i % 16] = ((unsigned char*)data)[i];
        } else {
            ascii[i % 16] = '.';
        }
        if ((i+1) % 8 == 0 || i+1 == size) {
            printf(" ");
            if ((i+1) % 16 == 0) {
                printf("|  %s \n", ascii);
            } else if (i+1 == size) {
                ascii[(i+1) % 16] = '\0';
                if ((i+1) % 16 <= 8) {
                    printf(" ");
                }
                for (j = (i+1) % 16; j < 16; ++j) {
                    printf("   ");
                }
                printf("|  %s \n", ascii);
            }
        }
    }
}

mach_msg_return_t (*orig_mach_msg)(mach_msg_header_t *,
    mach_msg_option_t, mach_msg_size_t,
    mach_msg_size_t,
    mach_port_t,
    mach_msg_timeout_t,
    mach_port_t);

mach_msg_header_t mach_header(mach_msg_header_t *msg,
    mach_msg_bits_t msgh_bits
){
        mach_msg_header_t header_return = mach_header(
            msg,
            msgh_bits);
            return(header_return);

};



mach_msg_return_t mach_msg(mach_msg_header_t *msg,
    mach_msg_option_t option,
    mach_msg_size_t send_size,
    mach_msg_size_t rcv_size,
    mach_port_t rcv_name,
    mach_msg_timeout_t timeout,
    mach_port_t notify){

    /* We will call the original `mach_msg` after we print out the contents of each
     * message:
     */
    if(!orig_mach_msg){
        orig_mach_msg = dlsym(RTLD_NEXT, "mach_msg");
    }

    /* The mach message's local_port is how a response will be sent
     * back. If this is set, we assume there will be a response.
     */
    bool response = msg->msgh_local_port > 0;

    /* Request:*/

    printf("==============================================================\n");
    printf("Request Mach\n");
    printf("Send Size: 0x%x\n", send_size);
    printf("[P]Mach Port: 0x%x\n", rcv_name);
    hexdump(msg, send_size);
    mach_msg_return_t ret = mach_msg(msg,
        option,
        send_size,
        rcv_size,
        rcv_name,
        timeout,
        notify);
    printf("==============================================================\n");

    /* Response: */
    if(response){
        printf("Respond Mach\n");
        printf("Recv %s", rcv_name);
        hexdump(msg, rcv_size);
    }

    return(ret);
}


